from abc import ABC, abstractmethod
from typing import List, Dict, Any, Optional

class BaseRetriever(ABC):
    """Base interface that all retriever implementations must follow."""
    
    def __init__(self, config: Dict[str, Any]):
        """Initialize the retriever with its configuration."""
        self.config = config
        self.is_initialized = False
        self.generates_answer = False  # Default to False; retrievers that generate answers should override this
    
    @abstractmethod
    def setup(self, documents: List[Dict[str, Any]]) -> None:
        """
        Set up the retriever with documents.
        
        Args:
            documents: List of document dictionaries with 'content' and 'metadata' keys
        """
        pass
    
    @abstractmethod
    def retrieve(self, query: str, top_k: int = 5) -> List[Dict[str, Any]]:
        """
        Retrieve relevant documents for the given query.
        
        Args:
            query: The query string
            top_k: Number of documents to retrieve
            
        Returns:
            List of retrieved documents with 'content', 'metadata', and 'score' keys
        """
        pass
    
    def get_metadata(self) -> Dict[str, Any]:
        """Return metadata about this retriever for experiment tracking."""
        return {
            "type": self.__class__.__name__,
            "config": self.config,
        }
    
    def get_generated_answer(self) -> Optional[str]:
        """
        Get the last answer generated by this retriever, if it generates answers.
        
        Returns:
            The generated answer string or None if this retriever doesn't generate answers
        """
        return None
    
    def cleanup(self) -> None:
        """Clean up any resources used by the retriever."""
        self.is_initialized = False